/*//hooks/useEmployeeId
"use client";
import { useState, useEffect } from 'react';

export const useEmployeeId = () => {
    const [employeeId, setEmployeeIdState] = useState<number | null>(null);
debugger;
    useEffect(() => {
        const extractId = () => {
            if (typeof window === 'undefined') return;

            const match = window.location.hash.match(/master=(\d+)/);
            const id = match ? parseInt(match[1], 10) : null;
            setEmployeeIdState(id);
        };

        // –ñ–¥—ë–º –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ DOM (–∏–Ω–æ–≥–¥–∞ `useEffect` —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–ª–∏—à–∫–æ–º —Ä–∞–Ω–æ)
        requestAnimationFrame(() => {
            extractId();
        });

        window.addEventListener('hashchange', extractId);

        return () => {
            window.removeEventListener('hashchange', extractId);
        };
    }, []);

    const setEmployeeId = (id: number | null) => {
        const path = window.location.pathname;
        const search = window.location.search;
        const newHash = id ? `#master=${id}` : '';
        window.history.pushState(null, '', `${path}${search}${newHash}`);
        window.dispatchEvent(new Event('hashchange'));
    };

    return { employeeId, setEmployeeId };
};*/


// hooks/useEmployeeId.ts
/*"use client";
import { useState, useEffect, useCallback } from 'react';

export const useEmployeeId = () => {
    const extractFromHash = useCallback((): number | null => {
        if (typeof window === 'undefined') return null;
        const hash = window.location.hash;
        console.log('üîó Current hash:', hash);
        const match = hash.match(/master=(\d+)/);
        const result = match ? parseInt(match[1], 10) : null;
        console.log('üîó Extracted employeeId:', result);
        return result;
    }, []);

    const [employeeId, setEmployeeIdState] = useState<number | null>(null);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        const initialId = extractFromHash();
        console.log('üîç Initial employeeId:', initialId);
        setEmployeeIdState(initialId);
    }, [extractFromHash]);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è hash
    useEffect(() => {
        const handleHashChange = () => {
            const id = extractFromHash();
            console.log('üîó Hash changed ‚Üí employeeId:', id);
            setEmployeeIdState(id);
        };

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        window.addEventListener('hashchange', handleHashChange);
        window.addEventListener('popstate', handleHashChange);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º hash –ø—Ä–∏ –∫–∞–∂–¥–æ–º —Ä–µ–Ω–¥–µ—Ä–µ (–Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è)
        const checkHash = () => {
            const currentId = extractFromHash();
            setEmployeeIdState(prev => {
                if (prev !== currentId) {
                    console.log('üîÑ Hash updated programmatically:', currentId);
                    return currentId;
                }
                return prev;
            });
        };

        const intervalId = setInterval(checkHash, 100);

        return () => {
            window.removeEventListener('hashchange', handleHashChange);
            window.removeEventListener('popstate', handleHashChange);
            clearInterval(intervalId);
        };
    }, [extractFromHash]);

    const setEmployeeId = useCallback((id: number | null) => {
        console.log('‚úÖ useEmployeeId: setting employeeId =', id);
        setEmployeeIdState(id);

        const path = window.location.pathname;
        const search = window.location.search;
        const newHash = id ? `#master=${id}` : '';
        const newUrl = `${path}${search}${newHash}`;

        window.history.replaceState(null, '', newUrl);

        // –î–∏—Å–ø–∞—Ç—á–∏–º —Å–æ–±—ã—Ç–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        window.dispatchEvent(new Event('hashchange'));
        window.dispatchEvent(new Event('popstate'));
    }, []);

    return { employeeId, setEmployeeId };
};*/

// hooks/useEmployeeId.ts
/*"use client";
import { useState, useEffect, useCallback, useLayoutEffect } from 'react';

export const useEmployeeId = () => {
    const extractFromHash = useCallback((): number | null => {
        if (typeof window === 'undefined') return null;
        const hash = window.location.hash;
        const match = hash.match(/master=(\d+)/);
        return match ? parseInt(match[1], 10) : null;
    }, []);

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º useState —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –∑–Ω–∞—á–µ–Ω–∏–µ–º
    const [employeeId, setEmployeeIdState] = useState<number | null>(() => {
        // –ü—Ä–∏ –ø–µ—Ä–≤–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –∏–∑ hash
        if (typeof window !== 'undefined') {
            const initial = extractFromHash();
            console.log('üöÄ Initial employeeId from hash:', initial);
            return initial;
        }
        return null;
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º useLayoutEffect –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    useLayoutEffect(() => {
        const id = extractFromHash();
        console.log('üé¨ useLayoutEffect: setting employeeId to:', id);
        if (id !== employeeId) {
            setEmployeeIdState(id);
        }
    }, [extractFromHash, employeeId]);

    // –û–±—ã—á–Ω—ã–π useEffect –¥–ª—è hashchange
    useEffect(() => {
        const handleHashChange = () => {
            const id = extractFromHash();
            console.log('üîî Hash changed ‚Üí employeeId:', id);
            setEmployeeIdState(id);
        };

        window.addEventListener('hashchange', handleHashChange);
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, [extractFromHash]);

    const setEmployeeId = useCallback((id: number | null) => {
        setEmployeeIdState(id);
        const path = window.location.pathname;
        const search = window.location.search;
        const newHash = id ? `#master=${id}` : '';
        window.history.replaceState(null, '', `${path}${search}${newHash}`);
        window.dispatchEvent(new Event('hashchange'));
    }, []);

    console.log('üîÑ useEmployeeId returning:', employeeId);
    return { employeeId, setEmployeeId };
};*/

// hooks/useEmployeeId.ts - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
"use client";
import { useState, useEffect, useCallback, useLayoutEffect } from 'react';

export const useEmployeeId = () => {
    const extractFromHash = useCallback((): number | null => {
        if (typeof window === 'undefined') return null;
        const hash = window.location.hash;
        const match = hash.match(/master=(\d+)/);
        return match ? parseInt(match[1], 10) : null;
    }, []);

    const [employeeId, setEmployeeIdState] = useState<number | null>(() => {
        if (typeof window !== 'undefined') {
            return extractFromHash();
        }
        return null;
    });

    // –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º employeeId –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∞
    useLayoutEffect(() => {
        const id = extractFromHash();
        console.log('üé¨ useLayoutEffect: extracted ID:', id);
        setEmployeeIdState(prev => {
            if (prev !== id) {
                console.log('üé¨ Updating employeeId from', prev, 'to', id);
                return id;
            }
            return prev;
        });
    }, [extractFromHash]); // –£–±—Ä–∞–ª–∏ employeeId –æ—Ç—Å—é–¥–∞!

    useEffect(() => {
        const handleHashChange = () => {
            const id = extractFromHash();
            console.log('üîî Hash changed ‚Üí employeeId:', id);
            setEmployeeIdState(id);
        };

        window.addEventListener('hashchange', handleHashChange);
        return () => window.removeEventListener('hashchange', handleHashChange);
    }, [extractFromHash]);

    const setEmployeeId = useCallback((id: number | null) => {
        setEmployeeIdState(id);
        const path = window.location.pathname;
        const search = window.location.search;
        const newHash = id ? `#master=${id}` : '';
        window.history.replaceState(null, '', `${path}${search}${newHash}`);
        window.dispatchEvent(new Event('hashchange'));
    }, []);

    return { employeeId, setEmployeeId };
};
