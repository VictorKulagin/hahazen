// hooks/useAppointments.ts
import { useQuery, useMutation, useQueryClient } from "@tanstack/react-query";
import {
    fetchAppointments,
    createAppointment,
    updateAppointment,
    deleteAppointment,
    fetchAppointmentsByBranchAndDate,
    // @ts-ignore
    Appointment
} from "@/services/appointmentsApi";

import { fetchBookedDays, BookedDaysResponse } from "@/services/appointmentsApi";
import { formatDateLocal } from "@/components/utils/date";
import { AppointmentRequest } from "@/types/appointments";
import {AppointmentResponse} from "@/types/appointments";

export type DurationOption =
    | '1-day'
    | '2-days'
    | '3-days'
    | '4-days'
    | '5-days'
    | '6-days'
    | 'week';


export interface GroupedAppointments {
    [date: string]: {
        [time: string]: Appointment[];
    };
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é formatDate
const formatDate = (date: Date): string => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
};
// –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏
export const groupAppointments = (appointments: AppointmentResponse[]): GroupedAppointments => {
    return appointments.reduce((acc, appointment) => {
        const date = new Date(appointment.appointment_datetime);
        const dateKey = date.toISOString().split('T')[0];
        const timeKey = `${String(date.getHours()).padStart(2, '0')}:${String(date.getMinutes()).padStart(2, '0')}`;

        acc[dateKey] = acc[dateKey] || {};
        acc[dateKey][timeKey] = acc[dateKey][timeKey] || [];
        acc[dateKey][timeKey].push(appointment);

        return acc;
    }, {} as GroupedAppointments);
};

debugger;

export const useAppointments = (
    branchId?: number,
    employeeId?: number,
    duration: DurationOption = "1-day",
    currentStartDate: Date = new Date()
) => {
    const getDateRange = (): { start: string; end: string } => {
        const startDate = new Date(currentStartDate);
        startDate.setHours(0, 0, 0, 0);

        const endDate = new Date(startDate);
        const daysToAdd = durationToDays(duration) - 1;
        endDate.setDate(startDate.getDate() + daysToAdd);
        endDate.setHours(23, 59, 59, 999);

        return {
            start: formatDateLocal(startDate),
            end: formatDateLocal(endDate),
        };
    };

    const { start, end } = getDateRange();

    const queryKey = ["appointments", branchId, employeeId, start, end];
    //console.log("useAppointments queryKey:", queryKey); // ‚Üê —Ç–µ–ø–µ—Ä—å –≤–∏–¥–Ω–æ –≤ –∫–æ–Ω—Å–æ–ª–∏

    return useQuery<AppointmentResponse[], Error, GroupedAppointments>({
        queryKey, // –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à—É –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

        queryFn: () => {
            if (!branchId || !employeeId) return Promise.resolve([]);
            return fetchAppointments(branchId, employeeId, start, end);
        },
        enabled: !!branchId && !!employeeId,
        select: groupAppointments, // –ø—Ä–∏–Ω–∏–º–∞–µ—Ç AppointmentResponse[]
        //staleTime: 600000,
        staleTime: 600000, // 10 –º–∏–Ω—É—Ç –∫—ç—à
        refetchInterval: 60000, // –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    });
};


// –í—ã–Ω–æ—Å–∏–º —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –¥–Ω–∏
export const durationToDays = (duration: DurationOption): number => {
    return {
        '1-day': 1,
        '2-days': 2,
        '3-days': 3,
        '4-days': 4,
        '5-days': 5,
        '6-days': 6,
        'week': 7
    }[duration];
};

export const useCreateAppointment = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: (payload: AppointmentRequest) => createAppointment(payload),
        onSuccess: (data, variables) => {
            if (!variables) return;

            // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è —Ñ–∏–ª–∏–∞–ª–∞ –ø–æ –¥–∞—Ç–µ
            const dateKey = [
                "appointmentsByBranchAndDate",
                variables.branch_id,
                variables.date,
                variables.date,
            ];

            // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–ª—é—á–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–æ –º–∞—Å—Ç–µ—Ä—É
            const masterKey = [
                "appointments",
                variables.branch_id,
                variables.employee_id,
                variables.date,
                variables.date,
            ];

            // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –∫—ç—à–µ–π
            queryClient.invalidateQueries({ queryKey: dateKey });
            queryClient.invalidateQueries({ queryKey: masterKey });
            queryClient.invalidateQueries({ queryKey: ["appointments"] }); // –æ–±—â–∏–π –∏–Ω–≤–∞–ª–∏–¥–∞—Ü–∏–æ–Ω–Ω—ã–π –∫–ª—é—á - –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è

            console.log("Appointment created:", data, "with variables:", variables);
        },
    });
};

export const useUpdateAppointment = () => {
    const queryClient = useQueryClient();

    return useMutation<Appointment, Error, Appointment>({
        mutationFn: (data) => updateAppointment(data.id, data),
        onSuccess: (_, variables) => {
            console.log("‚úÖ –ó–∞–ø–∏—Å—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞:", variables);

            // –ò–Ω–≤–∞–ª–∏–¥–∞—Ü–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º
            queryClient.invalidateQueries({ queryKey: ["appointments"] });
            queryClient.invalidateQueries({ queryKey: ["appointmentsByBranchAndDate"] });
        },
    });
};

export const useDeleteAppointment = () => {
    const queryClient = useQueryClient();

    return useMutation<void, Error, number, { previous: Appointment[] | undefined }>({
        mutationFn: (id: number) => deleteAppointment(id),

        onMutate: async (id) => {
            await queryClient.cancelQueries({ queryKey: ["appointments"] });

            const previous = queryClient.getQueryData<Appointment[]>(["appointments"]);

            // ‚úÖ —Ç—É—Ç —É–∫–∞–∑—ã–≤–∞–µ–º generic
            queryClient.setQueryData<Appointment[]>(
                ["appointments"],
                (old) => (old ? old.filter((a) => a.id !== id) : [])
            );

            return { previous };
        },

        onError: (error, id, context) => {
            if (context?.previous) {
                queryClient.setQueryData(["appointments"], context.previous);
            }
            alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ #${id}: ${error.message}`);
        },

        onSuccess: () => {
            console.log("üóë –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞");
            queryClient.invalidateQueries({ queryKey: ["appointments"] });
            queryClient.invalidateQueries({ queryKey: ["appointmentsByBranchAndDate"] });
        },
    });
};

export const useBookedDays = (year: number, month: number, branch_id?: number | null) => {
    return useQuery<BookedDaysResponse, Error>({
        queryKey: ["bookedDays", year, month, branch_id],
        queryFn: () => fetchBookedDays(year, month, branch_id),
        staleTime: 5 * 60 * 1000,  // 5 –º–∏–Ω—É—Ç –∫—ç—à
        refetchOnWindowFocus: false,
    });
};

export const useAppointmentsByBranchAndDate = (
    branchId?: number,
    currentStartDate: Date = new Date()
) => {
    const startDate = formatDateLocal(currentStartDate);
    const endDate = startDate; // –æ–¥–∏–Ω –¥–µ–Ω—å

    const queryKey = ["appointmentsByBranchAndDate", branchId, startDate, endDate];
    console.log("useAppointmentsByBranchAndDate queryKey:", queryKey);

    return useQuery({
        queryKey,
        queryFn: () => {
            if (!branchId) return Promise.resolve([]);
            return fetchAppointmentsByBranchAndDate({ branchId, startDate, endDate });
        },
        enabled: !!branchId,
        staleTime: 600000,
    });
};
