//staff/[id]/page.tsx
"use client";
import React, {useEffect, useState, useRef} from "react";
import {
    TrashIcon,
    PencilIcon, Bars3Icon // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è  // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
} from "@heroicons/react/24/outline";
import {withAuth} from "@/hoc/withAuth";
import {useParams, useRouter} from "next/navigation";
import {branchesList} from "@/services/branchesList";
import {companiesList} from "@/services/companiesList";
import { Employee, fetchEmployees } from "@/services/employeeApi";
import {cabinetDashboard} from "@/services/cabinetDashboard";
import { createEmployee } from "@/services/employeeApi";
import { deleteEmployee } from "@/services/employeeApi";
import { updateEmployee } from "@/services/employeeApi";
import Link from "next/link";
import {AxiosError} from "axios";
import usePhoneInput from '@/hooks/usePhoneInput';

import { UI_validatePhone, validateName } from '@/components/Validations';

import { CreateEmployeeModal } from "@/components/schedulePage/CreateEmployeeModal";
import { EditEmployeeModal } from "@/components/schedulePage/EditEmployeeModal";

import {useEmployeeServices, useSyncEmployeeServices} from "@/hooks/useServices";
import SidebarMenu from "@/components/SidebarMenu";
import Image from "next/image";
import Loader from "@/components/Loader";

const Page: React.FC = ( ) => {


    // –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç
    const handleMenuItemClick = () => setIsMenuOpen(false);


    // –í –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ –º–∞—Å—Ç–µ—Ä–∞

    const [isAddModalOpen, setIsAddModalOpen] = useState(false);
    const [isEditModalOpen, setIsEditModalOpen] = useState(false);
    const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);

    const [isMenuOpen, setIsMenuOpen] = useState(false);

    const nameInputRef = useRef<HTMLInputElement>(null);

    const [employeesList, setEmployeesList] = useState<Employee[]>([]);

    const [userData, setUserData] = useState<any>(null);
    const [branchesData, setBranchesData] = useState<any>(null);

    const [companiesData, setCompaniesData] = useState<any>(null);
    const [isModalFilOpen, setIsModalFilOpen] = useState(false);
    const [isAccordionOpenEmployees, setIsAccordionOpenEmployees] = useState(false);
    const [isAccordionOpenClients, setIsAccordionOpenClients] = useState(false);

    const [employees, setEmployees] = useState<Employee[]>([]);

    const { phone, handlePhoneChange } = usePhoneInput();

    const [loading, setLoading] = useState(true);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string>("");

    const [isNotFound, setIsNotFound] = useState(false);

    const router = useRouter();

    const globalLoading =
        isLoading ||
        !companiesData ||
        !branchesData ||
        !userData ||
        employeesList.length === 0;

    const globalError = error || !companiesData || !branchesData ? error : "";



    const toggleFilModal = () => {
        setIsModalFilOpen((prev) => !prev);
    };
    const handleLogout = () => {
        localStorage.removeItem("access_token"); // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω
        router.push("/signin"); // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ª–æ–≥–∏–Ω–∞
    };

    useEffect(() => {
        const loadEmployees = async () => {
            try {
                const employees = await fetchEmployees();
                setEmployeesList(employees);
            } catch (err) {
                setError("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.");
            } finally {
                setIsLoading(false);
            }
        };

        loadEmployees();
    }, []);

    useEffect(() => {
        if (!companiesData || companiesData.length === 0) return;

        const fetchUserData = async () => {
            try {
                const companyId = companiesData[0]?.id;
                if (!companyId) {
                    setError("–ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.");
                    return;
                }

                const data = await branchesList(companyId);
                console.log("response.data setBranchesData", data);
                setBranchesData(data);
            } catch (err: unknown) {
                if (err instanceof Error) {
                    setError(`–û—à–∏–±–∫–∞: ${err.message}`);
                } else {
                    setError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                }
            } finally {
                setIsLoading(false);
            }
        };

        fetchUserData();
    }, [companiesData]);


    useEffect(() => {
        const token = localStorage.getItem("access_token"); // –ò–ª–∏ –±—Ä–∞—Ç—å –∏–∑ cookie

        if (!token) {
            setError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
            setIsLoading(false);
            return;
        }

        const fetchUserData = async () => {
            try {
                const data = await companiesList();
                console.log("response.data companiesList", data);
                setCompaniesData(data); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            } catch (err: unknown) {
                if (err instanceof AxiosError) {
                    setError(`–û—à–∏–±–∫–∞: ${err.response?.data?.message || err.message || "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"}`);
                } else if (err instanceof Error) {
                    setError(`–û—à–∏–±–∫–∞: ${err.message}`);
                } else {
                    setError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞");
                }
            } finally {
                setIsLoading(false);
            }
        };

        fetchUserData();
    }, []);


    useEffect(() => {
        if (typeof window !== "undefined") {
            const token = localStorage.getItem("access_token");
            if (!token) {
                setError("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.");
                setIsLoading(false);
                return;
            }

            const fetchUserData = async () => {
                try {
                    const data = await cabinetDashboard();
                    console.log("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", data);
                    setUserData(data);
                } catch (err: any) {
                    console.error("–û—à–∏–±–∫–∞ API:", err);
                    setError(err.response?.data?.message || "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö.");
                } finally {
                    setIsLoading(false);
                }
            };

            fetchUserData();
        }
    }, []);


    useEffect(() => {
        const loadEmployees = async () => {
            try {
                const employeesData = await fetchEmployees(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ API
                setEmployees(employeesData); // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
            } catch (error: any) {
                setError(error.response?.data?.message || error.message); // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            } finally {
                setLoading(false); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            }
        };

        loadEmployees(); // –ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    }, []);

    const id = branchesData?.[0]?.id ?? null;
    console.log(id + " ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞ ....");





    const params = useParams();
    //const idFromUrl = params.id as string || null;
    let idFromUrl: string | null = null;
    if (params && 'id' in params) {
        idFromUrl = params.id as string;
    }

    console.log("ID –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª–∏–∞–ª–∞:", id);
    console.log("ID –∏–∑ URL:", idFromUrl);

    useEffect(() => {
        if (!idFromUrl || !id) return;
        if (String(idFromUrl) !== String(id)) {
            console.warn(`–ù–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ ID: idFromUrl (${idFromUrl}) !== id (${id})`);
            setIsNotFound(true);
        }
    }, [idFromUrl, id]);

    useEffect(() => {
        // –ò–∑–º–µ–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        document.title = isNotFound ? "404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" : "–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã";
    }, [isNotFound]);










    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å–ª—É–≥ –º–∞—Å—Ç–µ—Ä–∞
// –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º—É—Ç–∞—Ü–∏–∏
    const { mutate: syncServices } = useSyncEmployeeServices();

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É—Å–ª—É–≥
// –î–æ–±–∞–≤–ª—è–µ–º —Ö—É–∫ –¥–ª—è —É—Å–ª—É–≥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const { data: currentEmployeeServices, isLoading: isEmployeeServicesLoading } = useEmployeeServices(
        editingEmployee?.id
    );



    const handleDelete = async (id: number) => {
        if (!window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞?")) {
            return;
        }

        try {
            await deleteEmployee(id);
            setEmployees((prev) => prev.filter((employee) => employee.id !== id));
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:", error);
        }
    };

    const handleEdit = (employee: Employee) => {
        setEditingEmployee(employee);
        setIsEditModalOpen(true);
    };


    if (isNotFound) {
        return (
            <div className="text-center py-10">
                <h1 className="text-2xl font-bold mb-4">404 - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞</h1>
                <p className="mb-2">–¢–∞–∫–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–µ—Ç</p>
                <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Å—ã–ª–∫—É ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, –≤ –Ω–µ–π –æ—à–∏–±–∫–∞.</p>
            </div>
        );
    }


    // üîπ –ï–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏
    if (globalLoading) {
        return (
            <div className="h-screen bg-backgroundBlue">
                <Loader type="default" visible={true} />
            </div>
        );
    }

    // üîπ –ï–¥–∏–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (globalError) {
        return (
            <div className="flex flex-col items-center justify-center h-screen bg-backgroundBlue text-red-400 text-center">
                <p className="text-xl font-semibold mb-2">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö</p>
                <p>{globalError}</p>
                <button
                    onClick={() => location.reload()}
                    className="mt-4 px-4 py-2 bg-green-600 hover:bg-green-500 text-white rounded-lg transition"
                >
                    –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É
                </button>
            </div>
        );
    }



    // –ü—Ä–∏–º–µ—Ä –∫–ª–∏–µ–Ω—Ç–æ–≤
    const clients = [
        { id: 1, name: "–ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è –±–∞–∑–∞", url: `/clients/base/${id}` },
    ];
//debugger;
    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é
    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–µ–Ω—é


    return (
        <div className="relative min-h-screen md:grid md:grid-cols-[30%_70%] lg:grid-cols-[20%_80%] bg-backgroundBlue">
            {/* –ü–æ–¥–ª–æ–∂–∫–∞ –¥–ª—è –∫–ª–∏–∫–∞ –≤–Ω–µ –º–µ–Ω—é */}
            {isMenuOpen && (
                <div
                    className="fixed inset-0 bg-black bg-opacity-50 z-10 md:hidden"
                    onClick={() => setIsMenuOpen(false)}
                ></div>
            )}


            {/* –ú–µ–Ω—é */}
            <aside
                className={`bg-darkBlue text-white p-4 fixed z-20 h-full flex flex-col transition-transform duration-300 md:relative md:translate-x-0 ${
                    isMenuOpen ? "translate-x-0" : "-translate-x-full"
                }`}
            >

                {/* –í–µ—Ä—Ö: –ª–æ–≥–æ—Ç–∏–ø */}
                <div
                    className="border-b border-gray-400 p-2 flex items-center cursor-pointer"
                    onClick={toggleFilModal}
                >
                    <Image
                        src="/logo.png"
                        alt="–õ–æ–≥–æ—Ç–∏–ø"
                        width={32}
                        height={32}
                        className="mr-2"
                    />
                    <span className="text-sm font-medium truncate">
      {companiesData?.[0]?.name || "–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}
    </span>
                </div>
                {/* –ú–µ–Ω—é */}
                <div className="flex-grow mt-4 overflow-y-auto">
                    <SidebarMenu
                        id={id}
                        companyName={companiesData?.[0]?.name}
                        userData={userData}
                        variant="desktop"
                        onLogout={handleLogout}
                    />
                </div>
            </aside>

            {/* ‚úÖ –ö–Ω–æ–ø–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é (–º–æ–±–∏–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è) */}
            {/* –ú–æ–±–∏–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ */}
            <div className="md:hidden fixed top-3 left-3 z-30">
                <button
                    onClick={() => setIsMenuOpen(!isMenuOpen)}
                    className="bg-green-500 p-2 rounded-md shadow hover:bg-green-600 transition"
                >
                    <Bars3Icon className="h-6 w-6 text-white" />
                </button>
            </div>

            {/* –ú–æ–±–∏–ª—å–Ω–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ –º–µ–Ω—é */}
            {/* –ö–ù–û–ü–ö–ê –û–¢–ö–†–´–¢–ò–Ø –ú–ï–ù–Æ ‚Äî —Ç–æ–ª—å–∫–æ –º–æ–±–∏–ª—å–Ω–∞—è */}
            <div className="md:hidden fixed top-3 left-3 z-30">
                <button
                    onClick={() => setIsMenuOpen(!isMenuOpen)}
                    className="bg-green-500 p-2 rounded-md shadow hover:bg-green-600 transition"
                >
                    <Bars3Icon className="h-6 w-6 text-white" />
                </button>
            </div>

            {/* –ú–æ–±–∏–ª—å–Ω—ã–π –¥—Ä–æ–≤–µ—Ä */}
            {isMenuOpen && (
                <div
                    className="md:hidden fixed inset-0 z-20 bg-black/50"
                    onClick={() => setIsMenuOpen(false)}
                >
                    <div
                        className="absolute left-0 top-0 h-full w-4/5 sm:w-2/3 bg-darkBlue transform translate-x-0 transition-transform duration-300"
                        onClick={(e) => e.stopPropagation()}
                    >
                        <SidebarMenu
                            id={id}
                            companyName={companiesData?.[0]?.name}
                            userData={userData}
                            variant="mobile"
                            onLogout={handleLogout}
                            onNavigate={() => setIsMenuOpen(false)} // –∑–∞–∫—Ä—ã–≤–∞–µ–º –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ
                        />
                    </div>
                </div>
            )}


            {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ (–∫–æ–Ω—Ç–µ–Ω—Ç) */}
            <main
                className="bg-backgroundBlue p-4 h-full md:h-auto"
                onClick={() => isMenuOpen && setIsMenuOpen(false)}
            >


                <div>
                    {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –§–∏–ª–∏–∞–ª—ã */}
                    {isModalFilOpen && (
                        <div className="fixed inset-0 flex items-center justify-left bg-black bg-opacity-50 z-50"
                             onClick={toggleFilModal} // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ –ø–æ —Ñ–æ–Ω—É
                        >
                            <div
                                className="z-50 bg-white p-6 rounded-lg shadow-lg text-black absolute top-[100px] w-full sm:w-11/12 md:w-1/3"
                                onClick={(e) => e.stopPropagation()} // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–ø–ª—ã—Ç–∏—è —Å–æ–±—ã—Ç–∏—è
                            >
                                <h2 className="text-lg font-bold mb-4">–§–∏–ª–∏–∞–ª—ã</h2>
                                <p>{branchesData && branchesData.length > 0 ? branchesData[0]?.name : "–§–∏–ª–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}</p>
                                <button
                                    className="mt-4 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                    onClick={toggleFilModal}
                                >
                                    –ó–∞–∫—Ä—ã—Ç—å
                                </button>
                            </div>
                        </div>
                    )}
                </div>



                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
                <div className="flex items-center bg-[#081b27] text-white p-3 rounded-md mb-4">
                    <span className="ml-auto font-semibold text-sm">
                        –°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏
                    </span>
                </div>

                {/* –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞" */}
                <button
                    onClick={() => setIsAddModalOpen(true)}
                    className="bg-green-500 text-white px-4 py-2 rounded hover:bg-green-600"
                >
                    + –î–æ–±–∞–≤–∏—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
                </button>

                {/* –¢–∞–±–ª–∏—Ü–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ */}
                <EmployeesTable
                    loading={loading}
                    error={error}
                    employees={employees}
                    handleEdit={handleEdit}
                    handleDelete={handleDelete}
                />



                {/* ‚úÖ –ù–æ–≤–æ–µ –æ–∫–Ω–æ ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ */}
                <CreateEmployeeModal
                    isOpen={isAddModalOpen}
                    branchId={id}
                    onClose={() => setIsAddModalOpen(false)}
                    onSave={() => {
                        setIsAddModalOpen(false);
                        // –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è ‚Äî –æ–±–Ω–æ–≤–∏–º —Å–ø–∏—Å–æ–∫
                        fetchEmployees().then(setEmployees);
                    }}
                />

                {/* ‚úÖ –ù–æ–≤–æ–µ –æ–∫–Ω–æ ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ */}
                <EditEmployeeModal
                    isOpen={isEditModalOpen}
                    employee={editingEmployee}
                    onClose={() => setIsEditModalOpen(false)}
                    onSave={async (updated) => {
                        // –ª–æ–∫–∞–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞
                        setEmployees((prev) =>
                            prev.map((emp) => (emp.id === updated.id ? updated : emp))
                        );
                        setIsEditModalOpen(false);
                    }}
                />


            </main>
        </div>
    );
};

export default withAuth(Page);


const EmployeesTable = ({
                            loading,
                            error,
                            employees,
                            handleEdit,
                            handleDelete,
                        }: {
    loading: boolean;
    error: string;
    employees: Employee[];
    handleEdit: (employee: Employee) => void;
    handleDelete: (id: number) => void;
}) => {
    return (
        <div className="grid grid-cols-1 md:grid-cols-1 gap-4 mt-6">
            <section className="bg-white text-black p-4 rounded shadow">
                <h2 className="text-lg font-semibold mb-2">–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏</h2>

                <div className="overflow-auto">
                    {loading ? (
                        <div className="text-center text-gray-500">–ó–∞–≥—Ä—É–∑–∫–∞...</div>
                    ) : error ? (
                        <div className="text-center text-red-500">–û—à–∏–±–∫–∞: {error}</div>
                    ) : employees.length === 0 ? (
                        <div className="text-center text-gray-500">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</div>
                    ) : (
                        <div className="md:overflow-x-visible overflow-x-auto">
                            <table className="w-full border-collapse border border-gray-300 min-w-[600px]">
                                <thead>
                                <tr className="bg-gray-100">
                                    <th className="border p-2 text-left">–ò–º—è</th>
                                    <th className="border p-2 text-left">–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è</th>
                                    <th className="border p-2 text-left hidden sm:table-cell">Email</th>
                                    <th className="border p-2 text-left hidden xs:table-cell">–¢–µ–ª–µ—Ñ–æ–Ω</th>
                                    <th className="border p-2 text-left">–î–∞—Ç–∞ –Ω–∞–π–º–∞</th>
                                    <th className="border p-2 w-0.5"></th>
                                    <th className="border p-2 w-0.5"></th>
                                </tr>
                                </thead>
                                <tbody>
                                {employees.map((employee) => (
                                    <tr key={employee.id} className="hover:bg-gray-50">
                                        <td className="border p-2">{employee.name}</td>
                                        <td className="border p-2">{employee.specialty}</td>
                                        <td className="border p-2 hidden sm:table-cell break-all">
                                            {employee.email}
                                        </td>
                                        <td className="border p-2 hidden xs:table-cell">{employee.phone}</td>
                                        <td className="border p-2">{employee.hire_date}</td>
                                        <td className="border p-2">
                                            <button
                                                onClick={() => handleEdit(employee)}
                                                className="block mx-auto"
                                            >
                                                <PencilIcon className="h-5 w-5 text-blue-500 hover:text-blue-700" />
                                            </button>
                                        </td>
                                        <td className="border p-2">
                                            <button
                                                onClick={() => handleDelete(employee.id)}
                                                className="block mx-auto"
                                            >
                                                <TrashIcon className="h-5 w-5 text-red-500 hover:text-red-700" />
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>
            </section>
        </div>
    );
};
















